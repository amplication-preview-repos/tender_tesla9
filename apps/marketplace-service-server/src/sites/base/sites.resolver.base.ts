/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sites } from "./Sites";
import { SitesCountArgs } from "./SitesCountArgs";
import { SitesFindManyArgs } from "./SitesFindManyArgs";
import { SitesFindUniqueArgs } from "./SitesFindUniqueArgs";
import { CreateSitesArgs } from "./CreateSitesArgs";
import { UpdateSitesArgs } from "./UpdateSitesArgs";
import { DeleteSitesArgs } from "./DeleteSitesArgs";
import { Projects } from "../../projects/base/Projects";
import { SitesService } from "../sites.service";
@graphql.Resolver(() => Sites)
export class SitesResolverBase {
  constructor(protected readonly service: SitesService) {}

  async _sitesItemsMeta(
    @graphql.Args() args: SitesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sites])
  async sitesItems(@graphql.Args() args: SitesFindManyArgs): Promise<Sites[]> {
    return this.service.sitesItems(args);
  }

  @graphql.Query(() => Sites, { nullable: true })
  async sites(
    @graphql.Args() args: SitesFindUniqueArgs
  ): Promise<Sites | null> {
    const result = await this.service.sites(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sites)
  async createSites(@graphql.Args() args: CreateSitesArgs): Promise<Sites> {
    return await this.service.createSites({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Sites)
  async updateSites(
    @graphql.Args() args: UpdateSitesArgs
  ): Promise<Sites | null> {
    try {
      return await this.service.updateSites({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sites)
  async deleteSites(
    @graphql.Args() args: DeleteSitesArgs
  ): Promise<Sites | null> {
    try {
      return await this.service.deleteSites(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Projects, {
    nullable: true,
    name: "project",
  })
  async getProject(@graphql.Parent() parent: Sites): Promise<Projects | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
