/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sites as PrismaSites,
  Projects as PrismaProjects,
} from "@prisma/client";

export class SitesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SitesCountArgs, "select">): Promise<number> {
    return this.prisma.sites.count(args);
  }

  async sitesItems(args: Prisma.SitesFindManyArgs): Promise<PrismaSites[]> {
    return this.prisma.sites.findMany(args);
  }
  async sites(args: Prisma.SitesFindUniqueArgs): Promise<PrismaSites | null> {
    return this.prisma.sites.findUnique(args);
  }
  async createSites(args: Prisma.SitesCreateArgs): Promise<PrismaSites> {
    return this.prisma.sites.create(args);
  }
  async updateSites(args: Prisma.SitesUpdateArgs): Promise<PrismaSites> {
    return this.prisma.sites.update(args);
  }
  async deleteSites(args: Prisma.SitesDeleteArgs): Promise<PrismaSites> {
    return this.prisma.sites.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProjects | null> {
    return this.prisma.sites
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
