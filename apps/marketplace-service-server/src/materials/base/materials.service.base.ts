/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Materials as PrismaMaterials,
  Listings as PrismaListings,
} from "@prisma/client";

export class MaterialsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MaterialsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.materials.count(args);
  }

  async materialsItems(
    args: Prisma.MaterialsFindManyArgs
  ): Promise<PrismaMaterials[]> {
    return this.prisma.materials.findMany(args);
  }
  async materials(
    args: Prisma.MaterialsFindUniqueArgs
  ): Promise<PrismaMaterials | null> {
    return this.prisma.materials.findUnique(args);
  }
  async createMaterials(
    args: Prisma.MaterialsCreateArgs
  ): Promise<PrismaMaterials> {
    return this.prisma.materials.create(args);
  }
  async updateMaterials(
    args: Prisma.MaterialsUpdateArgs
  ): Promise<PrismaMaterials> {
    return this.prisma.materials.update(args);
  }
  async deleteMaterials(
    args: Prisma.MaterialsDeleteArgs
  ): Promise<PrismaMaterials> {
    return this.prisma.materials.delete(args);
  }

  async findListingsItems(
    parentId: string,
    args: Prisma.ListingsFindManyArgs
  ): Promise<PrismaListings[]> {
    return this.prisma.materials
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listingsItems(args);
  }
}
