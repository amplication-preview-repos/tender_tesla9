/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Materials } from "./Materials";
import { MaterialsCountArgs } from "./MaterialsCountArgs";
import { MaterialsFindManyArgs } from "./MaterialsFindManyArgs";
import { MaterialsFindUniqueArgs } from "./MaterialsFindUniqueArgs";
import { CreateMaterialsArgs } from "./CreateMaterialsArgs";
import { UpdateMaterialsArgs } from "./UpdateMaterialsArgs";
import { DeleteMaterialsArgs } from "./DeleteMaterialsArgs";
import { ListingsFindManyArgs } from "../../listings/base/ListingsFindManyArgs";
import { Listings } from "../../listings/base/Listings";
import { MaterialsService } from "../materials.service";
@graphql.Resolver(() => Materials)
export class MaterialsResolverBase {
  constructor(protected readonly service: MaterialsService) {}

  async _materialsItemsMeta(
    @graphql.Args() args: MaterialsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Materials])
  async materialsItems(
    @graphql.Args() args: MaterialsFindManyArgs
  ): Promise<Materials[]> {
    return this.service.materialsItems(args);
  }

  @graphql.Query(() => Materials, { nullable: true })
  async materials(
    @graphql.Args() args: MaterialsFindUniqueArgs
  ): Promise<Materials | null> {
    const result = await this.service.materials(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Materials)
  async createMaterials(
    @graphql.Args() args: CreateMaterialsArgs
  ): Promise<Materials> {
    return await this.service.createMaterials({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Materials)
  async updateMaterials(
    @graphql.Args() args: UpdateMaterialsArgs
  ): Promise<Materials | null> {
    try {
      return await this.service.updateMaterials({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Materials)
  async deleteMaterials(
    @graphql.Args() args: DeleteMaterialsArgs
  ): Promise<Materials | null> {
    try {
      return await this.service.deleteMaterials(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Listings], { name: "listingsItems" })
  async findListingsItems(
    @graphql.Parent() parent: Materials,
    @graphql.Args() args: ListingsFindManyArgs
  ): Promise<Listings[]> {
    const results = await this.service.findListingsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
