/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaterialsService } from "../materials.service";
import { MaterialsCreateInput } from "./MaterialsCreateInput";
import { Materials } from "./Materials";
import { MaterialsFindManyArgs } from "./MaterialsFindManyArgs";
import { MaterialsWhereUniqueInput } from "./MaterialsWhereUniqueInput";
import { MaterialsUpdateInput } from "./MaterialsUpdateInput";
import { ListingsFindManyArgs } from "../../listings/base/ListingsFindManyArgs";
import { Listings } from "../../listings/base/Listings";
import { ListingsWhereUniqueInput } from "../../listings/base/ListingsWhereUniqueInput";

export class MaterialsControllerBase {
  constructor(protected readonly service: MaterialsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Materials })
  @swagger.ApiBody({
    type: MaterialsCreateInput,
  })
  async createMaterials(
    @common.Body() data: MaterialsCreateInput
  ): Promise<Materials> {
    return await this.service.createMaterials({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        materialType: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Materials] })
  @ApiNestedQuery(MaterialsFindManyArgs)
  async materialsItems(@common.Req() request: Request): Promise<Materials[]> {
    const args = plainToClass(MaterialsFindManyArgs, request.query);
    return this.service.materialsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        materialType: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Materials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async materials(
    @common.Param() params: MaterialsWhereUniqueInput
  ): Promise<Materials | null> {
    const result = await this.service.materials({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        materialType: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Materials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: MaterialsUpdateInput,
  })
  async updateMaterials(
    @common.Param() params: MaterialsWhereUniqueInput,
    @common.Body() data: MaterialsUpdateInput
  ): Promise<Materials | null> {
    try {
      return await this.service.updateMaterials({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          materialType: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Materials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaterials(
    @common.Param() params: MaterialsWhereUniqueInput
  ): Promise<Materials | null> {
    try {
      return await this.service.deleteMaterials({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          materialType: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/listingsItems")
  @ApiNestedQuery(ListingsFindManyArgs)
  async findListingsItems(
    @common.Req() request: Request,
    @common.Param() params: MaterialsWhereUniqueInput
  ): Promise<Listings[]> {
    const query = plainToClass(ListingsFindManyArgs, request.query);
    const results = await this.service.findListingsItems(params.id, {
      ...query,
      select: {
        address: true,
        availableFrom: true,
        availableTo: true,
        createdAt: true,
        description: true,
        geoLocation: true,
        id: true,
        latitude: true,
        longitude: true,

        material: {
          select: {
            id: true,
          },
        },

        serviceProvider: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/listingsItems")
  async connectListingsItems(
    @common.Param() params: MaterialsWhereUniqueInput,
    @common.Body() body: ListingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listingsItems: {
        connect: body,
      },
    };
    await this.service.updateMaterials({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/listingsItems")
  async updateListingsItems(
    @common.Param() params: MaterialsWhereUniqueInput,
    @common.Body() body: ListingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listingsItems: {
        set: body,
      },
    };
    await this.service.updateMaterials({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/listingsItems")
  async disconnectListingsItems(
    @common.Param() params: MaterialsWhereUniqueInput,
    @common.Body() body: ListingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listingsItems: {
        disconnect: body,
      },
    };
    await this.service.updateMaterials({
      where: params,
      data,
      select: { id: true },
    });
  }
}
