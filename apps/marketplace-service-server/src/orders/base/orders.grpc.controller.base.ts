/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { OrdersService } from "../orders.service";
import { OrdersCreateInput } from "./OrdersCreateInput";
import { OrdersWhereInput } from "./OrdersWhereInput";
import { OrdersWhereUniqueInput } from "./OrdersWhereUniqueInput";
import { OrdersFindManyArgs } from "./OrdersFindManyArgs";
import { OrdersUpdateInput } from "./OrdersUpdateInput";
import { Orders } from "./Orders";

export class OrdersGrpcControllerBase {
  constructor(protected readonly service: OrdersService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Orders })
  @GrpcMethod("OrdersService", "createOrders")
  async createOrders(@common.Body() data: OrdersCreateInput): Promise<Orders> {
    return await this.service.createOrders({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        listing: data.listing
          ? {
              connect: data.listing,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        listing: {
          select: {
            id: true,
          },
        },

        orderDate: true,
        quantity: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Orders] })
  @ApiNestedQuery(OrdersFindManyArgs)
  @GrpcMethod("OrdersService", "ordersItems")
  async ordersItems(@common.Req() request: Request): Promise<Orders[]> {
    const args = plainToClass(OrdersFindManyArgs, request.query);
    return this.service.ordersItems({
      ...args,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        listing: {
          select: {
            id: true,
          },
        },

        orderDate: true,
        quantity: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OrdersService", "orders")
  async orders(
    @common.Param() params: OrdersWhereUniqueInput
  ): Promise<Orders | null> {
    const result = await this.service.orders({
      where: params,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        listing: {
          select: {
            id: true,
          },
        },

        orderDate: true,
        quantity: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OrdersService", "updateOrders")
  async updateOrders(
    @common.Param() params: OrdersWhereUniqueInput,
    @common.Body() data: OrdersUpdateInput
  ): Promise<Orders | null> {
    try {
      return await this.service.updateOrders({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          listing: data.listing
            ? {
                connect: data.listing,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,

          listing: {
            select: {
              id: true,
            },
          },

          orderDate: true,
          quantity: true,
          totalPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OrdersService", "deleteOrders")
  async deleteOrders(
    @common.Param() params: OrdersWhereUniqueInput
  ): Promise<Orders | null> {
    try {
      return await this.service.deleteOrders({
        where: params,
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,

          listing: {
            select: {
              id: true,
            },
          },

          orderDate: true,
          quantity: true,
          totalPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
