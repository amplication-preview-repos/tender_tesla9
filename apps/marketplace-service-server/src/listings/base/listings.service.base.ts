/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Listings as PrismaListings,
  Orders as PrismaOrders,
  Materials as PrismaMaterials,
  ServiceProviders as PrismaServiceProviders,
} from "@prisma/client";

export class ListingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ListingsCountArgs, "select">): Promise<number> {
    return this.prisma.listings.count(args);
  }

  async listingsItems(
    args: Prisma.ListingsFindManyArgs
  ): Promise<PrismaListings[]> {
    return this.prisma.listings.findMany(args);
  }
  async listings(
    args: Prisma.ListingsFindUniqueArgs
  ): Promise<PrismaListings | null> {
    return this.prisma.listings.findUnique(args);
  }
  async createListings(
    args: Prisma.ListingsCreateArgs
  ): Promise<PrismaListings> {
    return this.prisma.listings.create(args);
  }
  async updateListings(
    args: Prisma.ListingsUpdateArgs
  ): Promise<PrismaListings> {
    return this.prisma.listings.update(args);
  }
  async deleteListings(
    args: Prisma.ListingsDeleteArgs
  ): Promise<PrismaListings> {
    return this.prisma.listings.delete(args);
  }

  async findOrdersItems(
    parentId: string,
    args: Prisma.OrdersFindManyArgs
  ): Promise<PrismaOrders[]> {
    return this.prisma.listings
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersItems(args);
  }

  async getMaterial(parentId: string): Promise<PrismaMaterials | null> {
    return this.prisma.listings
      .findUnique({
        where: { id: parentId },
      })
      .material();
  }

  async getServiceProvider(
    parentId: string
  ): Promise<PrismaServiceProviders | null> {
    return this.prisma.listings
      .findUnique({
        where: { id: parentId },
      })
      .serviceProvider();
  }
}
