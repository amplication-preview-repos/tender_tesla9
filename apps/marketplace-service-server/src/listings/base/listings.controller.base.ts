/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ListingsService } from "../listings.service";
import { ListingsCreateInput } from "./ListingsCreateInput";
import { Listings } from "./Listings";
import { ListingsFindManyArgs } from "./ListingsFindManyArgs";
import { ListingsWhereUniqueInput } from "./ListingsWhereUniqueInput";
import { ListingsUpdateInput } from "./ListingsUpdateInput";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { OrdersWhereUniqueInput } from "../../orders/base/OrdersWhereUniqueInput";

export class ListingsControllerBase {
  constructor(protected readonly service: ListingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Listings })
  async createListings(
    @common.Body() data: ListingsCreateInput
  ): Promise<Listings> {
    return await this.service.createListings({
      data: {
        ...data,

        material: data.material
          ? {
              connect: data.material,
            }
          : undefined,

        serviceProvider: data.serviceProvider
          ? {
              connect: data.serviceProvider,
            }
          : undefined,
      },
      select: {
        address: true,
        availableFrom: true,
        availableTo: true,
        createdAt: true,
        description: true,
        geoLocation: true,
        id: true,
        latitude: true,
        longitude: true,

        material: {
          select: {
            id: true,
          },
        },

        serviceProvider: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Listings] })
  @ApiNestedQuery(ListingsFindManyArgs)
  async listingsItems(@common.Req() request: Request): Promise<Listings[]> {
    const args = plainToClass(ListingsFindManyArgs, request.query);
    return this.service.listingsItems({
      ...args,
      select: {
        address: true,
        availableFrom: true,
        availableTo: true,
        createdAt: true,
        description: true,
        geoLocation: true,
        id: true,
        latitude: true,
        longitude: true,

        material: {
          select: {
            id: true,
          },
        },

        serviceProvider: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Listings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async listings(
    @common.Param() params: ListingsWhereUniqueInput
  ): Promise<Listings | null> {
    const result = await this.service.listings({
      where: params,
      select: {
        address: true,
        availableFrom: true,
        availableTo: true,
        createdAt: true,
        description: true,
        geoLocation: true,
        id: true,
        latitude: true,
        longitude: true,

        material: {
          select: {
            id: true,
          },
        },

        serviceProvider: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Listings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateListings(
    @common.Param() params: ListingsWhereUniqueInput,
    @common.Body() data: ListingsUpdateInput
  ): Promise<Listings | null> {
    try {
      return await this.service.updateListings({
        where: params,
        data: {
          ...data,

          material: data.material
            ? {
                connect: data.material,
              }
            : undefined,

          serviceProvider: data.serviceProvider
            ? {
                connect: data.serviceProvider,
              }
            : undefined,
        },
        select: {
          address: true,
          availableFrom: true,
          availableTo: true,
          createdAt: true,
          description: true,
          geoLocation: true,
          id: true,
          latitude: true,
          longitude: true,

          material: {
            select: {
              id: true,
            },
          },

          serviceProvider: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Listings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteListings(
    @common.Param() params: ListingsWhereUniqueInput
  ): Promise<Listings | null> {
    try {
      return await this.service.deleteListings({
        where: params,
        select: {
          address: true,
          availableFrom: true,
          availableTo: true,
          createdAt: true,
          description: true,
          geoLocation: true,
          id: true,
          latitude: true,
          longitude: true,

          material: {
            select: {
              id: true,
            },
          },

          serviceProvider: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/ordersItems")
  @ApiNestedQuery(OrdersFindManyArgs)
  async findOrdersItems(
    @common.Req() request: Request,
    @common.Param() params: ListingsWhereUniqueInput
  ): Promise<Orders[]> {
    const query = plainToClass(OrdersFindManyArgs, request.query);
    const results = await this.service.findOrdersItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        listing: {
          select: {
            id: true,
          },
        },

        orderDate: true,
        quantity: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersItems")
  async connectOrdersItems(
    @common.Param() params: ListingsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        connect: body,
      },
    };
    await this.service.updateListings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersItems")
  async updateOrdersItems(
    @common.Param() params: ListingsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        set: body,
      },
    };
    await this.service.updateListings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersItems")
  async disconnectOrdersItems(
    @common.Param() params: ListingsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        disconnect: body,
      },
    };
    await this.service.updateListings({
      where: params,
      data,
      select: { id: true },
    });
  }
}
