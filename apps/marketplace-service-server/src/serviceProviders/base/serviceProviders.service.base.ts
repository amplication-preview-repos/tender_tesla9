/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceProviders as PrismaServiceProviders,
  Listings as PrismaListings,
} from "@prisma/client";

export class ServiceProvidersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceProvidersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceProviders.count(args);
  }

  async serviceProvidersItems(
    args: Prisma.ServiceProvidersFindManyArgs
  ): Promise<PrismaServiceProviders[]> {
    return this.prisma.serviceProviders.findMany(args);
  }
  async serviceProviders(
    args: Prisma.ServiceProvidersFindUniqueArgs
  ): Promise<PrismaServiceProviders | null> {
    return this.prisma.serviceProviders.findUnique(args);
  }
  async createServiceProviders(
    args: Prisma.ServiceProvidersCreateArgs
  ): Promise<PrismaServiceProviders> {
    return this.prisma.serviceProviders.create(args);
  }
  async updateServiceProviders(
    args: Prisma.ServiceProvidersUpdateArgs
  ): Promise<PrismaServiceProviders> {
    return this.prisma.serviceProviders.update(args);
  }
  async deleteServiceProviders(
    args: Prisma.ServiceProvidersDeleteArgs
  ): Promise<PrismaServiceProviders> {
    return this.prisma.serviceProviders.delete(args);
  }

  async findListingsItems(
    parentId: string,
    args: Prisma.ListingsFindManyArgs
  ): Promise<PrismaListings[]> {
    return this.prisma.serviceProviders
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listingsItems(args);
  }
}
