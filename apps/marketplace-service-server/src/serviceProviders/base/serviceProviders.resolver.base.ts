/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceProviders } from "./ServiceProviders";
import { ServiceProvidersCountArgs } from "./ServiceProvidersCountArgs";
import { ServiceProvidersFindManyArgs } from "./ServiceProvidersFindManyArgs";
import { ServiceProvidersFindUniqueArgs } from "./ServiceProvidersFindUniqueArgs";
import { CreateServiceProvidersArgs } from "./CreateServiceProvidersArgs";
import { UpdateServiceProvidersArgs } from "./UpdateServiceProvidersArgs";
import { DeleteServiceProvidersArgs } from "./DeleteServiceProvidersArgs";
import { ListingsFindManyArgs } from "../../listings/base/ListingsFindManyArgs";
import { Listings } from "../../listings/base/Listings";
import { ServiceProvidersService } from "../serviceProviders.service";
@graphql.Resolver(() => ServiceProviders)
export class ServiceProvidersResolverBase {
  constructor(protected readonly service: ServiceProvidersService) {}

  async _serviceProvidersItemsMeta(
    @graphql.Args() args: ServiceProvidersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceProviders])
  async serviceProvidersItems(
    @graphql.Args() args: ServiceProvidersFindManyArgs
  ): Promise<ServiceProviders[]> {
    return this.service.serviceProvidersItems(args);
  }

  @graphql.Query(() => ServiceProviders, { nullable: true })
  async serviceProviders(
    @graphql.Args() args: ServiceProvidersFindUniqueArgs
  ): Promise<ServiceProviders | null> {
    const result = await this.service.serviceProviders(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceProviders)
  async createServiceProviders(
    @graphql.Args() args: CreateServiceProvidersArgs
  ): Promise<ServiceProviders> {
    return await this.service.createServiceProviders({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceProviders)
  async updateServiceProviders(
    @graphql.Args() args: UpdateServiceProvidersArgs
  ): Promise<ServiceProviders | null> {
    try {
      return await this.service.updateServiceProviders({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceProviders)
  async deleteServiceProviders(
    @graphql.Args() args: DeleteServiceProvidersArgs
  ): Promise<ServiceProviders | null> {
    try {
      return await this.service.deleteServiceProviders(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Listings], { name: "listingsItems" })
  async findListingsItems(
    @graphql.Parent() parent: ServiceProviders,
    @graphql.Args() args: ListingsFindManyArgs
  ): Promise<Listings[]> {
    const results = await this.service.findListingsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
